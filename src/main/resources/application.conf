cdms {
    port = 9002
    port = ${?PORT}
    cassandra-host = 127.0.0.1
    cassandra-host = ${?CASSANDRA_HOST}
    cassandra-port = 9042
    cassandra-port = ${?CASSANDRA_PORT}
}
akka {
  loglevel = debug
  remote {
    artery {
      transport = tcp
      canonical {
        hostname = 127.0.0.1
        port = ${cdms.port}
      }
    }
  }
  actor {
    provider = local

    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
      jackson-cbor = "akka.serialization.jackson.JacksonCborSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.github.nikodemin.mobileoperator.common.serialization.CborSerializable" = jackson-cbor
    }
  }
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    cassandra {
        session-provider = "akka.stream.alpakka.cassandra.DefaultSessionProvider"
        service-discovery {
          name = ""
          lookup-timeout = 1 s
        }
        session-dispatcher = "akka.persistence.cassandra.default-dispatcher"
        read-profile = "akka-persistence-cassandra-profile"
        write-profile = "akka-persistence-cassandra-profile"
        journal {
          class = "akka.persistence.cassandra.journal.CassandraJournal"
           plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
           keyspace-autocreate = true
           tables-autocreate = true
           keyspace = "mobile_operator"
           table = "events"
           table-compaction-strategy.class = "SizeTieredCompactionStrategy"
           metadata-table = "metadata"
           all-persistence-ids-table = "all_persistence_ids"
           replication-strategy = "SimpleStrategy"
           replication-factor = 1
           max-message-batch-size = 100
           target-partition-size = 500000
           gc-grace-seconds = 864000
           support-deletes = off
        }
        query {
          class = "akka.persistence.cassandra.query.CassandraReadJournalProvider"
          plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
          read-profile = "akka-persistence-cassandra-profile"
          refresh-interval = 3s
          max-buffer-size = 500
          deserialization-parallelism = 2
        }
        snapshot {
          class = "akka.persistence.cassandra.snapshot.CassandraSnapshotStore"
          plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
          write-profile = "akka-persistence-cassandra-snapshot-profile"
          read-profile = "akka-persistence-cassandra-snapshot-profile"
          keyspace-autocreate = true
          tables-autocreate = true
          keyspace = "akka_snapshot"
          table = "snapshots"
          table-compaction-strategy.class = "SizeTieredCompactionStrategy"
          replication-strategy = "SimpleStrategy"
          replication-factor = 1
          gc-grace-seconds = 864000
          max-load-attempts = 3
        }
        events-by-tag {
          eventual-consistency-delay = 25ms
          flush-interval = 25ms
          pubsub-notification = on
        }
        datastax-java-driver {
          advanced.reconnect-on-init = on
          basic.contact-points = [${cdms.cassandra-host}":"${cdms.cassandra-port}]
          profiles {
            akka-persistence-cassandra-profile {
              basic.request {
                consistency = QUORUM
                default-idempotence = true
              }
            }
            akka-persistence-cassandra-snapshot-profile {
              basic.request {
                consistency = ONE
                default-idempotence = true
              }
            }
          }
        }
    }
  }
}

akka.projection.cassandra.offset-store.keyspace = "cdms_offset"