scalar OffsetDateTime
scalar Long

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

## Subscriptions ##

type Subscription {
    subscribeOnOrderChange(orderId: ID!): Order!
}

### Queries ###
type Query {
    # Products
    getAllProducts(pagination: Pagination, orderBy: ProductOrderBy): [Product!]!
    searchProducts(criteria: ProductCriteria!, pagination: Pagination, orderBy: ProductOrderBy): [Product!]!

    # Comments
    getComments(productId: ID!, rootComment: ID, pagination: Pagination, orderBy: CommentOrderBy): [Comment!]!

    # Orders
    searchOrders(criteria: OrderCriteria!, orderBy: OrderOrderBy): [Order!]!
    getOrdersById(ids: [ID!]!, orderBy: OrderOrderBy): [Order!]!

    # Person
    getPersonsById(ids: [ID!]!): [Person!]!

    # AddressInfo
    searchAddressInfo(criteria: AddressInfoCriteria!, pagination: Pagination): [AddressInfo!]!
}

input Pagination {
    offset: Long = 0
    quantity: Long = 100
}

input ProductCriteria {
    nameContaining: String
    minQuantity: Int
    minPrice: Int
    maxPrice: Int
}

enum ProductOrderBy {
    POPULAR
    CHEAPEST
    EXPENSIVE
    HIGH_ESTIMATION
    HIGH_COMMENT_COUNT
}

input OrderCriteria {
    startDate: OffsetDateTime
    endDate: OffsetDateTime
    state: OrderState
}

enum OrderOrderBy {
    NEWEST
    OLDEST
    STATE
}

enum CommentOrderBy {
    NEWEST
    OLDEST
    ESTIMATION
}

### Mutations ###

type Mutation {
    # Product
    addProduct(product: ProductAdd!): Product!
    modifyProduct(product: ProductModify!): Product!
    deleteProductsById(ids: [ID!]!): [Product!]!

    # Person
    addCustomer(customer: CustomerAdd!): Customer!
    addCourier(courier: CourierAdd!): Courier!
    addAdmin(admin: AdminAdd!): Admin!
    addManager(manager: ManagerAdd!): Manager!
    addStoreKeeper(storeKeeper: StoreKeeperAdd!): StoreKeeper!
    modifyCustomer(customer: CustomerModify!): Customer!
    modifyCourier(courier: CourierModify!): Courier!
    modifyAdmin(admin: AdminModify!): Admin!
    modifyManager(manager: ManagerModify!): Manager!
    modifyStoreKeeper(storeKeeper: StoreKeeperModify!): StoreKeeper!
    deletePersonsById(ids: [ID!]!): [Person!]!

    # Comment
    addComment(comment: CommentAdd!): Comment!
    modifyComment(comment: CommentModify!): Comment!
    deleteCommentsById(ids: [ID!]!): [Comment!]!

    # Order
    addOrder(order: OrderAdd!): Order!
    changeOrderState(orderId: ID!, newState: OrderState!): Order!

    # AddressInfo
    addAddressInfoToCustomer(customerId: ID!, addressInfo: AddressInfoAdd!): Person!
}

# Product

input ProductAdd {
    name: String!
    quantity: Int!
    description: String
    price: Long!
    images: [ImageIn!]!
}

input ProductModify {
    id: ID!
    name: String
    quantity: Int
    description: String
    price: Long
    images: [ImageIn!]
}

# Common

input ImageIn {
    date: OffsetDateTime
    name: String
    path: String!
    extension: String
    authorId: ID!
}

# Person

input CustomerAdd {
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!

    phoneNumber: String!
    avatar: ImageIn
    bio: String
    status: String
}

input CourierAdd {
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!

    phoneNumber: String!
}

input AdminAdd {
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
}

input ManagerAdd {
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!

    phoneNumber: String!
}

input StoreKeeperAdd {
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!

    phoneNumber: String!
}

input CustomerModify {
    id: ID!
    firstName: String
    lastName: String
    middleName: String
    age: Int
    email: String
    password: String

    phoneNumber: String
    avatar: ImageIn
    bio: String
    status: String
}

input CourierModify {
    id: ID!
    firstName: String
    lastName: String
    middleName: String
    age: Int
    email: String
    password: String

    phoneNumber: String
}

input AdminModify {
    id: ID!
    firstName: String
    lastName: String
    middleName: String
    age: Int
    email: String
    password: String
}

input ManagerModify {
    id: ID!
    firstName: String
    lastName: String
    middleName: String
    age: Int
    email: String
    password: String

    phoneNumber: String
}

input StoreKeeperModify {
    id: ID!
    firstName: String
    lastName: String
    middleName: String
    age: Int
    email: String
    password: String

    phoneNumber: String
}

# Comment

input CommentAdd {
    root: ID!
    authorId: ID!
    text: String!
    productId: ID!
    images: [ImageIn!]!
}

input CommentModify {
    id: ID!
    text: String
    images: [ImageIn!]
}

# Order

input OrderAdd {
    date: OffsetDateTime!
    paymentInfo: PaymentInfoAdd!
    delivery: DeliveryAdd!
    customerId: ID!
    productIds: [ID!]!
}

enum PaymentType {
    CASH
    CARD
}

input PaymentInfoAdd {
    amount: Long!
    currency: Currency!
    type: PaymentType!

    creditCard: CreditCardIn
}

input CreditCardIn {
    number: String!
    cardHolder: String!
    dueDate: OffsetDateTime!
    cvv: Int!
}

enum DeliveryType {
    COURIER
    POSTAL
    PICK_UP
}

input DeliveryAdd {
    type: DeliveryType!

    courierId: ID
    courierDeliveryAddress: AddressInfoAdd

    postalDeliveryCounty: String
    postalDeliveryCity: String
    postalDeliveryZipCode: String

    pickUpPointId: ID
}

input AddressInfoAdd {
    country: String!
    city: String!
    street: String!
    homeNumber: Int!
    homeNumberAddition: String
    flatNumber: Int!
}

input AddressInfoCriteria {
    customerId: ID
    country: String
    city: String
    street: String
    homeNumber: Int
    homeNumberAddition: String
    flatNumber: Int
}

### Output type definitions ###

# Payment

type CreditCard {
    number: String!
    cardHolder: String!
    dueDate: OffsetDateTime!
    cvv: Int!
}

enum Currency {
    RUB
    EUR
    USD
}

interface PaymentInfo {
    amount: Long!
    currency: Currency!
}

type CashPayment implements PaymentInfo {
    amount: Long!
    currency: Currency!
}

type CreditCardPayment implements PaymentInfo {
    amount: Long!
    currency: Currency!

    creditCard: CreditCard!
}

# Order

enum OrderState {
    PENDING
    ACKNOWLEDGE
    IN_DELIVERY
    CANCELLED
    COMPLETED
    REJECTED
    FAILED
}

type Order {
    id: ID
    date: OffsetDateTime
    state: OrderState
    paymentInfo: PaymentInfo!
    delivery: Delivery!
    customer: Customer!
    products: [Product!]!
}

# Delivery

union Delivery = CourierDelivery | PostalDelivery | PickUpDelivery

type CourierDelivery {
    courier: Courier!
    address: AddressInfo!
}

type PostalDelivery {
    county: String
    city: String
    zipCode: String!
}

type PickUpDelivery {
    pickUpPoint: AddressInfo!
}

# Product

type Product {
    id: ID
    name: String!
    quantity: Int!
    description: String
    price: Long!
    images: [Image!]!
}

# Person

interface Person {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
    role: Role!
}

enum Role {
    CUSTOMER
    COURIER
    ADMIN
    MANAGER
    STORE_KEEPER
}

type Customer implements Person {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
    role: Role!

    phoneNumber: String!
    avatar: Image
    bio: String
    status: String
    addresses: [AddressInfo!]!
}

type Courier implements Person {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
    role: Role!

    phoneNumber: String!
}

type Admin implements Person {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
    role: Role!
}

type Manager implements Person {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
    role: Role!

    phoneNumber: String!
}

type StoreKeeper implements Person {
    id: ID
    firstName: String!
    lastName: String!
    middleName: String
    age: Int
    email: String!
    password: String!
    role: Role!

    phoneNumber: String!
}

# Comment

type Comment {
    id: ID
    date: OffsetDateTime
    author: Person!
    text: String!
    product: Product!
    images: [Image!]!
    subthread: [Comment!]!
    estimation: Int
}

# common models and misc

type Image {
    id: ID
    date: OffsetDateTime
    name: String
    path: String!
    extension: String
    author: Person
}

type AddressInfo {
    id: ID
    country: String!
    city: String!
    street: String!
    homeNumber: Int!
    homeNumberAddition: String
    flatNumber: Int!
}